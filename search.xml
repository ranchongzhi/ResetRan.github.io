<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="2020/10/12/hello-world/"/>
      <url>2020/10/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python学习笔记——numpy（1）</title>
      <link href="2020/06/14/numpy-1/"/>
      <url>2020/06/14/numpy-1/</url>
      
        <content type="html"><![CDATA[<p>学过python的人应该都接触过<a href="https://baike.baidu.com/item/numpy/5678437?fr=aladdin"><strong>numpy</strong></a>这个有名的第三方库，它是一个支持大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库。</p><h1 id="1-安装numpy"><a href="#1-安装numpy" class="headerlink" title="1.安装numpy"></a>1.安装numpy</h1><p>安装方法有两种：</p><ul><li>pip安装：直接在命令行里键入<code>pip install numpy</code>即可，如果遇到安装速度过慢的情况，可以考虑到清华镜像源下载安装。</li><li>conda安装，在anaconda powershell里输入<code>conda install numpy</code>,速度慢也可以换源。<br>我这里已经安装好了，显示如下：<br><img src="https://zmlzvt.coding-pages.com//post-images/1592147524509.jpg"><br>打开idle验证一下安装是否成功：<pre class=" language-py"><code class="language-py">>>> import numpy as np>>> np.__version__#打印版本信息'1.16.5'>>> np.ones(5)#生成值全为1的数组array([1., 1., 1., 1., 1.])</code></pre>正确生成了数组，说明numpy安装成功<h1 id="2-基础操作"><a href="#2-基础操作" class="headerlink" title="2. 基础操作"></a>2. 基础操作</h1><h2 id="2-1通过维度创建数组"><a href="#2-1通过维度创建数组" class="headerlink" title="2.1通过维度创建数组"></a>2.1通过维度创建数组</h2>先看由指定维度来创建数组的方法：<pre class=" language-py"><code class="language-py">>>> a=np.array([1,2,3])#创建一维数组>>> aarray([1, 2, 3]）>>> b=np.array([[1,2,3],[4,5,6]])#创建二维数组，高维度同理>>> barray([[1, 2, 3],     [4, 5, 6]])>>> np.zeros([3,3])#生成指定维度的值全为0的数组array([[0., 0., 0.],     [0., 0., 0.],     [0., 0., 0.]])>>> np.ones([3,3])##生成指定维度的值全为1的数组array([[1., 1., 1.],     [1., 1., 1.],     [1., 1., 1.]])>>> np.empty([3,3])#生成指定维度的值为随机数的数组array([[1., 1., 1.],     [1., 1., 1.],     [1., 1., 1.]])>>> np.empty_like(b)#生成和b数组同维度的值为随机数的数组array([[0, 0, 0],     [0, 0, 0]])</code></pre>在实际操作中，通过生成a，b数组的方式来创建高维度数组时会显得很麻烦，所以一般使用<code>np.ones</code>或<code>np.zeros</code>来生成指定维度的数组，然后对其中的元素进行修改。<h2 id="2-2通过数值范围创建数组"><a href="#2-2通过数值范围创建数组" class="headerlink" title="2.2通过数值范围创建数组"></a>2.2通过数值范围创建数组</h2><h3 id="2-2-1等差数列"><a href="#2-2-1等差数列" class="headerlink" title="2.2.1等差数列"></a>2.2.1等差数列</h3>有时候，我们需要通过数值范围来创建数组，比如现在需要一个从1到100的公差为2的等差数列，通过前面的方法也可以创建（先生成指定维度的0数组，再利用循环进行赋值），这样会显得比较繁琐，可以使用<code>arange</code>函数：<pre class=" language-py"><code class="language-py">#以生成1到20的公差为2的等差数列为例>>> np.arange(1,20,2)#array([ 1,  3,  5,  7,  9, 11, 13, 15, 17, 19])>>> np.arange(start=1,stop=20,step=2)#详细写法array([ 1,  3,  5,  7,  9, 11, 13, 15, 17, 19])>>> np.arange(1,20,1)array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,     18, 19])</code></pre><code>arange</code>函数中需要三个参数，依次是起始点、终止点和步长，可以看出：即使步长设置为1，输出的数组也是不包括终止点的，所以<code>arange</code>函数的输入可以看做一个左闭右开区间，如果想要包括终止点，可以让终止点增大一个步长。</li></ul><p>除了<code>arange</code>函数，还有一个<code>linspace</code>函数也可以生成等差数列：</p><pre class=" language-py"><code class="language-py">#以生成1到10的公差为1的等差数列为例>>> np.linspace(1,10,10)array([ 1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10.])>>> np.linspace(start=1,stop=10,num=10)#详细写法array([ 1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10.])>>> np.linspace(1,10,10,endpoint=False)array([1. , 1.9, 2.8, 3.7, 4.6, 5.5, 6.4, 7.3, 8.2, 9.1])</code></pre><p><code>linspace</code>函数中需要至少三个参数，依次为起始点、终止点和要生成的等间距点的数量，还有一个可选参数<code>endpoint</code>，它的默认值为<code>True</code>，表示默认包括终止点，此时可将输入理解为一个闭区间，将其设置为<code>False</code>后，输入又变成了一个左闭右开区间。</p><h3 id="2-2-2等比数列"><a href="#2-2-2等比数列" class="headerlink" title="2.2.2等比数列"></a>2.2.2等比数列</h3><p><code>numpy</code>同样有函数来创建满足需要的等比数列，函数名字叫<code>logspace</code>，该函数有<code>start</code>、<code>stop</code>、<code>num</code>、<code>endpoint</code>、<code>base</code>五个参数，<br>|参数   |描述|<br>|:-: | :-: |<br>|start       |表示所生成数列的起始值为${base}^{start}$            |<br>|stop        |表示所生成数列的终止值为$base^{stop}$          |<br>|num        |要生成的等步长的样本数量，默认为50|<br>|endpoint|该值为 True 时，数列中中包含$base^{stop}$ 值，反之不包含，默认是True。|<br>|base|    对数 log 的底数，默认值为10|<br>实例如下：</p><pre class=" language-py"><code class="language-py">#生成1到10000的等差数列>>> np.logspace(0,4,5)array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04])>>> np.logspace(0,4,5,endpoint=False)array([1.00000000e+00, 6.30957344e+00, 3.98107171e+01, 2.51188643e+02,       1.58489319e+03]#生成1到128的等差数列>>> np.logspace(0,7,8,base=2)array([  1.,   2.,   4.,   8.,  16.,  32.,  64., 128.])</code></pre><h2 id="2-3数据类型"><a href="#2-3数据类型" class="headerlink" title="2.3数据类型"></a>2.3数据类型</h2><p>在上述的各种函数中，其实都还有一个参数，名字为<code>dtype</code>，它可以用来指定数组中元素的类型，举一个例子：</p><pre class=" language-py"><code class="language-py">>>> c=np.array([1,2,3,4])>>> carray([1, 2, 3, 4])>>> c.dtypedtype('int32')>>> d=np.array([1,2,3,4],dtype='float32')>>> darray([1., 2., 3., 4.], dtype=float32)</code></pre><p>这里再附上numpy里的数据类型表（转载于<a href="https://www.runoob.com/numpy/numpy-dtype.html">菜鸟教程</a>）：<br>|名称|    描述|<br>|:-:|:-:|<br>|bool_    |布尔型数据类型（True 或者 False）<br>|int_    |默认的整数类型（类似于 C 语言中的 long，int32 或 int64）<br>|intc    |与 C 的 int 类型一样，一般是 int32 或 int 64<br>|intp    |用于索引的整数类型（类似于 C 的 ssize_t，一般情况下仍然是 int32 或 int64）<br>|int8    |字节（-128 to 127）<br>|int16    |整数（-32768 to 32767）<br>|int32    |整数（-2147483648 to 2147483647）<br>|int64    |整数（-9223372036854775808 to 9223372036854775807）<br>|uint8    |无符号整数（0 to 255）<br>|uint16    |无符号整数（0 to 65535）<br>|uint32    |无符号整数（0 to 4294967295）<br>|uint64    |无符号整数（0 to 18446744073709551615）<br>|float_    |float64 类型的简写<br>|float16    |半精度浮点数，包括：1 个符号位，5 个指数位，10 个尾数位<br>|float32    |单精度浮点数，包括：1 个符号位，8 个指数位，23 个尾数位<br>|float64    |双精度浮点数，包括：1 个符号位，11 个指数位，52 个尾数位<br>|complex_    |complex128 类型的简写，即 128 位复数<br>|complex64    |复数，表示双 32 位浮点数（实数部分和虚数部分）<br>|complex128    |复数，表示双 64 位浮点数（实数部分和虚数部分）</p>]]></content>
      
      
      
        <tags>
            
            <tag> numpy </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
